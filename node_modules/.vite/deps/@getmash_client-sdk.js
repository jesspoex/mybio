import {
  __commonJS,
  __publicField,
  __toESM
} from "./chunk-DSTXS4JB.js";

// node_modules/ms/index.js
var require_ms = __commonJS({
  "node_modules/ms/index.js"(exports, module) {
    var s = 1e3;
    var m = s * 60;
    var h = m * 60;
    var d = h * 24;
    var w = d * 7;
    var y = d * 365.25;
    module.exports = function(val, options) {
      options = options || {};
      var type = typeof val;
      if (type === "string" && val.length > 0) {
        return parse3(val);
      } else if (type === "number" && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error(
        "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
      );
    };
    function parse3(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match) {
        return;
      }
      var n = parseFloat(match[1]);
      var type = (match[2] || "ms").toLowerCase();
      switch (type) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return n * y;
        case "weeks":
        case "week":
        case "w":
          return n * w;
        case "days":
        case "day":
        case "d":
          return n * d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return n * h;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return n * m;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return n * s;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return n;
        default:
          return void 0;
      }
    }
    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return Math.round(ms / d) + "d";
      }
      if (msAbs >= h) {
        return Math.round(ms / h) + "h";
      }
      if (msAbs >= m) {
        return Math.round(ms / m) + "m";
      }
      if (msAbs >= s) {
        return Math.round(ms / s) + "s";
      }
      return ms + "ms";
    }
    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return plural(ms, msAbs, d, "day");
      }
      if (msAbs >= h) {
        return plural(ms, msAbs, h, "hour");
      }
      if (msAbs >= m) {
        return plural(ms, msAbs, m, "minute");
      }
      if (msAbs >= s) {
        return plural(ms, msAbs, s, "second");
      }
      return ms + " ms";
    }
    function plural(ms, msAbs, n, name) {
      var isPlural = msAbs >= n * 1.5;
      return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
    }
  }
});

// node_modules/debug/src/common.js
var require_common = __commonJS({
  "node_modules/debug/src/common.js"(exports, module) {
    function setup(env) {
      createDebug.debug = createDebug;
      createDebug.default = createDebug;
      createDebug.coerce = coerce;
      createDebug.disable = disable;
      createDebug.enable = enable;
      createDebug.enabled = enabled;
      createDebug.humanize = require_ms();
      createDebug.destroy = destroy;
      Object.keys(env).forEach((key) => {
        createDebug[key] = env[key];
      });
      createDebug.names = [];
      createDebug.skips = [];
      createDebug.formatters = {};
      function selectColor(namespace) {
        let hash = 0;
        for (let i = 0; i < namespace.length; i++) {
          hash = (hash << 5) - hash + namespace.charCodeAt(i);
          hash |= 0;
        }
        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
      }
      createDebug.selectColor = selectColor;
      function createDebug(namespace) {
        let prevTime;
        let enableOverride = null;
        let namespacesCache;
        let enabledCache;
        function debug2(...args) {
          if (!debug2.enabled) {
            return;
          }
          const self = debug2;
          const curr = Number(new Date());
          const ms = curr - (prevTime || curr);
          self.diff = ms;
          self.prev = prevTime;
          self.curr = curr;
          prevTime = curr;
          args[0] = createDebug.coerce(args[0]);
          if (typeof args[0] !== "string") {
            args.unshift("%O");
          }
          let index = 0;
          args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
            if (match === "%%") {
              return "%";
            }
            index++;
            const formatter = createDebug.formatters[format];
            if (typeof formatter === "function") {
              const val = args[index];
              match = formatter.call(self, val);
              args.splice(index, 1);
              index--;
            }
            return match;
          });
          createDebug.formatArgs.call(self, args);
          const logFn = self.log || createDebug.log;
          logFn.apply(self, args);
        }
        debug2.namespace = namespace;
        debug2.useColors = createDebug.useColors();
        debug2.color = createDebug.selectColor(namespace);
        debug2.extend = extend;
        debug2.destroy = createDebug.destroy;
        Object.defineProperty(debug2, "enabled", {
          enumerable: true,
          configurable: false,
          get: () => {
            if (enableOverride !== null) {
              return enableOverride;
            }
            if (namespacesCache !== createDebug.namespaces) {
              namespacesCache = createDebug.namespaces;
              enabledCache = createDebug.enabled(namespace);
            }
            return enabledCache;
          },
          set: (v) => {
            enableOverride = v;
          }
        });
        if (typeof createDebug.init === "function") {
          createDebug.init(debug2);
        }
        return debug2;
      }
      function extend(namespace, delimiter) {
        const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
        newDebug.log = this.log;
        return newDebug;
      }
      function enable(namespaces) {
        createDebug.save(namespaces);
        createDebug.namespaces = namespaces;
        createDebug.names = [];
        createDebug.skips = [];
        let i;
        const split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
        const len = split.length;
        for (i = 0; i < len; i++) {
          if (!split[i]) {
            continue;
          }
          namespaces = split[i].replace(/\*/g, ".*?");
          if (namespaces[0] === "-") {
            createDebug.skips.push(new RegExp("^" + namespaces.slice(1) + "$"));
          } else {
            createDebug.names.push(new RegExp("^" + namespaces + "$"));
          }
        }
      }
      function disable() {
        const namespaces = [
          ...createDebug.names.map(toNamespace),
          ...createDebug.skips.map(toNamespace).map((namespace) => "-" + namespace)
        ].join(",");
        createDebug.enable("");
        return namespaces;
      }
      function enabled(name) {
        if (name[name.length - 1] === "*") {
          return true;
        }
        let i;
        let len;
        for (i = 0, len = createDebug.skips.length; i < len; i++) {
          if (createDebug.skips[i].test(name)) {
            return false;
          }
        }
        for (i = 0, len = createDebug.names.length; i < len; i++) {
          if (createDebug.names[i].test(name)) {
            return true;
          }
        }
        return false;
      }
      function toNamespace(regexp) {
        return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, "*");
      }
      function coerce(val) {
        if (val instanceof Error) {
          return val.stack || val.message;
        }
        return val;
      }
      function destroy() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      }
      createDebug.enable(createDebug.load());
      return createDebug;
    }
    module.exports = setup;
  }
});

// node_modules/debug/src/browser.js
var require_browser = __commonJS({
  "node_modules/debug/src/browser.js"(exports, module) {
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.storage = localstorage();
    exports.destroy = (() => {
      let warned = false;
      return () => {
        if (!warned) {
          warned = true;
          console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }
      };
    })();
    exports.colors = [
      "#0000CC",
      "#0000FF",
      "#0033CC",
      "#0033FF",
      "#0066CC",
      "#0066FF",
      "#0099CC",
      "#0099FF",
      "#00CC00",
      "#00CC33",
      "#00CC66",
      "#00CC99",
      "#00CCCC",
      "#00CCFF",
      "#3300CC",
      "#3300FF",
      "#3333CC",
      "#3333FF",
      "#3366CC",
      "#3366FF",
      "#3399CC",
      "#3399FF",
      "#33CC00",
      "#33CC33",
      "#33CC66",
      "#33CC99",
      "#33CCCC",
      "#33CCFF",
      "#6600CC",
      "#6600FF",
      "#6633CC",
      "#6633FF",
      "#66CC00",
      "#66CC33",
      "#9900CC",
      "#9900FF",
      "#9933CC",
      "#9933FF",
      "#99CC00",
      "#99CC33",
      "#CC0000",
      "#CC0033",
      "#CC0066",
      "#CC0099",
      "#CC00CC",
      "#CC00FF",
      "#CC3300",
      "#CC3333",
      "#CC3366",
      "#CC3399",
      "#CC33CC",
      "#CC33FF",
      "#CC6600",
      "#CC6633",
      "#CC9900",
      "#CC9933",
      "#CCCC00",
      "#CCCC33",
      "#FF0000",
      "#FF0033",
      "#FF0066",
      "#FF0099",
      "#FF00CC",
      "#FF00FF",
      "#FF3300",
      "#FF3333",
      "#FF3366",
      "#FF3399",
      "#FF33CC",
      "#FF33FF",
      "#FF6600",
      "#FF6633",
      "#FF9900",
      "#FF9933",
      "#FFCC00",
      "#FFCC33"
    ];
    function useColors() {
      if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
        return true;
      }
      if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
        return false;
      }
      return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function formatArgs(args) {
      args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module.exports.humanize(this.diff);
      if (!this.useColors) {
        return;
      }
      const c = "color: " + this.color;
      args.splice(1, 0, c, "color: inherit");
      let index = 0;
      let lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, (match) => {
        if (match === "%%") {
          return;
        }
        index++;
        if (match === "%c") {
          lastC = index;
        }
      });
      args.splice(lastC, 0, c);
    }
    exports.log = console.debug || console.log || (() => {
    });
    function save(namespaces) {
      try {
        if (namespaces) {
          exports.storage.setItem("debug", namespaces);
        } else {
          exports.storage.removeItem("debug");
        }
      } catch (error) {
      }
    }
    function load() {
      let r;
      try {
        r = exports.storage.getItem("debug");
      } catch (error) {
      }
      if (!r && typeof process !== "undefined" && "env" in process) {
        r = process.env.DEBUG;
      }
      return r;
    }
    function localstorage() {
      try {
        return localStorage;
      } catch (error) {
      }
    }
    module.exports = require_common()(exports);
    var { formatters } = module.exports;
    formatters.j = function(v) {
      try {
        return JSON.stringify(v);
      } catch (error) {
        return "[UnexpectedJSONParseError]: " + error.message;
      }
    };
  }
});

// node_modules/@getmash/client-sdk/dist/api/routes.js
var WalletButtonFloatSide;
(function(WalletButtonFloatSide2) {
  WalletButtonFloatSide2["Left"] = "left";
  WalletButtonFloatSide2["Right"] = "right";
})(WalletButtonFloatSide || (WalletButtonFloatSide = {}));
var WalletButtonFloatPlacement;
(function(WalletButtonFloatPlacement2) {
  WalletButtonFloatPlacement2["Default"] = "default";
  WalletButtonFloatPlacement2["Custom"] = "custom";
  WalletButtonFloatPlacement2["Ghost"] = "ghost";
  WalletButtonFloatPlacement2["Intercom"] = "intercom";
  WalletButtonFloatPlacement2["BasicShiftVertical"] = "basic_shift_vertical";
  WalletButtonFloatPlacement2["BasicShiftHorizontal"] = "basic_shift_horizontal";
})(WalletButtonFloatPlacement || (WalletButtonFloatPlacement = {}));
function getEarner(baseURL, earnerID) {
  const request = new Request(`${baseURL}/earners/${earnerID}`);
  return fetch(request).then((data) => data.json());
}

// node_modules/@getmash/client-sdk/dist/config.js
var DefaultAPIBaseURL = "https://api.getmash.com";
var DefaultWalletURL = "https://wallet.getmash.com/widget";
var DefaultWidgetBaseURL = "https://widgets.getmash.com";
var DEFAULT_WIDGETS_CONFIG = {
  baseURL: DefaultWidgetBaseURL,
  injectTheme: true,
  injectWidgets: true
};
function parse(config) {
  var _a;
  return {
    api: config.api || DefaultAPIBaseURL,
    autoHide: (_a = config.autoHide) != null ? _a : false,
    earnerID: config.earnerID,
    walletURL: config.walletURL || DefaultWalletURL,
    widgets: Object.assign({}, DEFAULT_WIDGETS_CONFIG, config.widgets)
  };
}

// node_modules/@getmash/post-message/dist/PostMessageEngine.js
var import_debug = __toESM(require_browser(), 1);

// node_modules/uuid/dist/esm-browser/rng.js
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues(rnds8);
}

// node_modules/uuid/dist/esm-browser/regex.js
var regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

// node_modules/uuid/dist/esm-browser/validate.js
function validate(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default = validate;

// node_modules/uuid/dist/esm-browser/stringify.js
var byteToHex = [];
for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 256).toString(16).slice(1));
}
function unsafeStringify(arr, offset = 0) {
  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
}

// node_modules/uuid/dist/esm-browser/parse.js
function parse2(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  let v;
  const arr = new Uint8Array(16);
  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 255;
  arr[2] = v >>> 8 & 255;
  arr[3] = v & 255;
  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 255;
  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 255;
  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 255;
  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
  arr[11] = v / 4294967296 & 255;
  arr[12] = v >>> 24 & 255;
  arr[13] = v >>> 16 & 255;
  arr[14] = v >>> 8 & 255;
  arr[15] = v & 255;
  return arr;
}
var parse_default = parse2;

// node_modules/uuid/dist/esm-browser/v35.js
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  const bytes = [];
  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }
  return bytes;
}
var DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
var URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
function v35(name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    var _namespace;
    if (typeof value === "string") {
      value = stringToBytes(value);
    }
    if (typeof namespace === "string") {
      namespace = parse_default(namespace);
    }
    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {
      throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
    }
    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 15 | version;
    bytes[8] = bytes[8] & 63 | 128;
    if (buf) {
      offset = offset || 0;
      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }
      return buf;
    }
    return unsafeStringify(bytes);
  }
  try {
    generateUUID.name = name;
  } catch (err) {
  }
  generateUUID.DNS = DNS;
  generateUUID.URL = URL2;
  return generateUUID;
}

// node_modules/uuid/dist/esm-browser/md5.js
function md5(bytes) {
  if (typeof bytes === "string") {
    const msg = unescape(encodeURIComponent(bytes));
    bytes = new Uint8Array(msg.length);
    for (let i = 0; i < msg.length; ++i) {
      bytes[i] = msg.charCodeAt(i);
    }
  }
  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
function md5ToHexEncodedArray(input) {
  const output = [];
  const length32 = input.length * 32;
  const hexTab = "0123456789abcdef";
  for (let i = 0; i < length32; i += 8) {
    const x = input[i >> 5] >>> i % 32 & 255;
    const hex = parseInt(hexTab.charAt(x >>> 4 & 15) + hexTab.charAt(x & 15), 16);
    output.push(hex);
  }
  return output;
}
function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
function wordsToMd5(x, len) {
  x[len >> 5] |= 128 << len % 32;
  x[getOutputLength(len) - 1] = len;
  let a = 1732584193;
  let b = -271733879;
  let c = -1732584194;
  let d = 271733878;
  for (let i = 0; i < x.length; i += 16) {
    const olda = a;
    const oldb = b;
    const oldc = c;
    const oldd = d;
    a = md5ff(a, b, c, d, x[i], 7, -680876936);
    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
    b = md5gg(b, c, d, a, x[i], 20, -373897302);
    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
    d = md5hh(d, a, b, c, x[i], 11, -358537222);
    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
    a = md5ii(a, b, c, d, x[i], 6, -198630844);
    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
    a = safeAdd(a, olda);
    b = safeAdd(b, oldb);
    c = safeAdd(c, oldc);
    d = safeAdd(d, oldd);
  }
  return [a, b, c, d];
}
function bytesToWords(input) {
  if (input.length === 0) {
    return [];
  }
  const length8 = input.length * 8;
  const output = new Uint32Array(getOutputLength(length8));
  for (let i = 0; i < length8; i += 8) {
    output[i >> 5] |= (input[i / 8] & 255) << i % 32;
  }
  return output;
}
function safeAdd(x, y) {
  const lsw = (x & 65535) + (y & 65535);
  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 65535;
}
function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
function md5cmn(q, a, b, x, s, t) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
}
function md5ff(a, b, c, d, x, s, t) {
  return md5cmn(b & c | ~b & d, a, b, x, s, t);
}
function md5gg(a, b, c, d, x, s, t) {
  return md5cmn(b & d | c & ~d, a, b, x, s, t);
}
function md5hh(a, b, c, d, x, s, t) {
  return md5cmn(b ^ c ^ d, a, b, x, s, t);
}
function md5ii(a, b, c, d, x, s, t) {
  return md5cmn(c ^ (b | ~d), a, b, x, s, t);
}
var md5_default = md5;

// node_modules/uuid/dist/esm-browser/v3.js
var v3 = v35("v3", 48, md5_default);

// node_modules/uuid/dist/esm-browser/native.js
var randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var native_default = {
  randomUUID
};

// node_modules/uuid/dist/esm-browser/v4.js
function v4(options, buf, offset) {
  if (native_default.randomUUID && !buf && !options) {
    return native_default.randomUUID();
  }
  options = options || {};
  const rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return unsafeStringify(rnds);
}
var v4_default = v4;

// node_modules/uuid/dist/esm-browser/sha1.js
function f(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;
    case 1:
      return x ^ y ^ z;
    case 2:
      return x & y ^ x & z ^ y & z;
    case 3:
      return x ^ y ^ z;
  }
}
function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}
function sha1(bytes) {
  const K = [1518500249, 1859775393, 2400959708, 3395469782];
  const H = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
  if (typeof bytes === "string") {
    const msg = unescape(encodeURIComponent(bytes));
    bytes = [];
    for (let i = 0; i < msg.length; ++i) {
      bytes.push(msg.charCodeAt(i));
    }
  } else if (!Array.isArray(bytes)) {
    bytes = Array.prototype.slice.call(bytes);
  }
  bytes.push(128);
  const l = bytes.length / 4 + 2;
  const N = Math.ceil(l / 16);
  const M = new Array(N);
  for (let i = 0; i < N; ++i) {
    const arr = new Uint32Array(16);
    for (let j = 0; j < 16; ++j) {
      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];
    }
    M[i] = arr;
  }
  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 4294967295;
  for (let i = 0; i < N; ++i) {
    const W = new Uint32Array(80);
    for (let t = 0; t < 16; ++t) {
      W[t] = M[i][t];
    }
    for (let t = 16; t < 80; ++t) {
      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);
    }
    let a = H[0];
    let b = H[1];
    let c = H[2];
    let d = H[3];
    let e = H[4];
    for (let t = 0; t < 80; ++t) {
      const s = Math.floor(t / 20);
      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;
      e = d;
      d = c;
      c = ROTL(b, 30) >>> 0;
      b = a;
      a = T;
    }
    H[0] = H[0] + a >>> 0;
    H[1] = H[1] + b >>> 0;
    H[2] = H[2] + c >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e >>> 0;
  }
  return [H[0] >> 24 & 255, H[0] >> 16 & 255, H[0] >> 8 & 255, H[0] & 255, H[1] >> 24 & 255, H[1] >> 16 & 255, H[1] >> 8 & 255, H[1] & 255, H[2] >> 24 & 255, H[2] >> 16 & 255, H[2] >> 8 & 255, H[2] & 255, H[3] >> 24 & 255, H[3] >> 16 & 255, H[3] >> 8 & 255, H[3] & 255, H[4] >> 24 & 255, H[4] >> 16 & 255, H[4] >> 8 & 255, H[4] & 255];
}
var sha1_default = sha1;

// node_modules/uuid/dist/esm-browser/v5.js
var v5 = v35("v5", 80, sha1_default);

// node_modules/@getmash/post-message/dist/PostMessageEngine.js
var PostMessageEngine = class {
  constructor(options) {
    __publicField(this, "name");
    __publicField(this, "_targetName");
    __publicField(this, "_targetWindow");
    __publicField(this, "_targetWindowFilter");
    __publicField(this, "_targetOrigin");
    __publicField(this, "_listeners", {});
    __publicField(this, "_logger");
    var _a, _b;
    this.name = options.name;
    this._targetName = options.targetName;
    this._targetWindow = options.targetWindow || window;
    this._targetWindowFilter = (_a = options.targetWindowFilter) != null ? _a : true;
    this._targetOrigin = options.targetOrigin || window.location.origin;
    this._logger = (0, import_debug.default)("mash:post-message");
    this._logger.enabled = this._logger.enabled || ((_b = options.debug) != null ? _b : false);
  }
  _shouldIgnoreMessage(evt) {
    if (this._targetOrigin !== "*" && evt.origin !== this._targetOrigin) {
      this._logger(`${this.name} engine ignored message due to origin, message: ${evt.origin} engine: ${this._targetOrigin}`);
      return true;
    }
    const message = evt.data;
    const messageIsObject = typeof message === "object";
    if (!messageIsObject) {
      this._logger(`${this.name} engine ignored message due to not an object`);
      return true;
    }
    if (messageIsObject && message.targetName !== this.name) {
      this._logger(`${this.name} engine ignored message due to target name, message: ${message.targetName} engine: ${this.name}`);
      return true;
    }
    if (this._targetWindowFilter && this._targetWindow !== evt.source) {
      this._logger(`${this.name} engine ignored message due to window, message: ${evt.source} engine: ${this._targetWindow}`);
      return true;
    }
    if (messageIsObject && !message.data) {
      this._logger(`${this.name} engine ignored message due to no data`);
      return true;
    }
    return false;
  }
  _listen(listener, id) {
    const wrapped = (evt) => {
      if (this._shouldIgnoreMessage(evt))
        return;
      listener(evt.data || null);
    };
    this._listeners[id] = wrapped;
    window.addEventListener("message", wrapped, false);
    return () => this.unsubscribe(id);
  }
  unsubscribe(id) {
    const listener = this._listeners[id];
    if (listener) {
      window.removeEventListener("message", listener);
      delete this._listeners[id];
    }
  }
  send(data) {
    this._targetWindow.postMessage({
      targetName: this._targetName,
      data
    }, this._targetOrigin);
  }
  listen(callback) {
    return this._listen(callback, v4_default());
  }
  destroy() {
    const keys = Object.keys(this._listeners);
    keys.forEach((key) => this.unsubscribe(key));
  }
};

// node_modules/@getmash/post-message/dist/index.js
var dist_default = PostMessageEngine;

// node_modules/@getmash/client-sdk/dist/iframe/IFrame.js
var Targets;
(function(Targets3) {
  Targets3["HostSiteFrame"] = "@mash/host-site-iframe";
  Targets3["Wallet"] = "@mash/wallet";
})(Targets || (Targets = {}));
var Layout;
(function(Layout2) {
  Layout2["Web"] = "web";
  Layout2["Mobile"] = "mobile";
})(Layout || (Layout = {}));
var FULLSCREEN_THRESHOLD = 480;
var MAX_CONTENT_WIDTH = 428;
var MAX_CONTENT_HEIGHT = 628;
var MIN_CONTENT_WIDTH = 100;
var MIN_CONTENT_HEIGHT = 100;
var MAX_HEIGHT_NOTIFICATION = 140;
var MAX_SHIFT_VERTICAL = 200;
var MAX_SHIFT_HORIZONTAL = 300;
var BASIC_SHIFT_VERTICAL = 100;
var BASIC_SHIFT_HORIZONTAL = 100;
var GHOST_SHIFT = 80;
var INTERCOM_SHIFT = 60;
var CONTAINER_STYLE = {
  position: "fixed",
  bottom: "0",
  right: "0",
  "margin-right": "20px",
  "margin-bottom": "20px",
  height: `${MIN_CONTENT_HEIGHT}px`,
  width: `${MIN_CONTENT_WIDTH}px`,
  "z-index": 2147483647,
  animation: "none !important",
  "background-color": "transparent !important",
  transition: "none !important"
};
var IFRAME_STYLE = {
  border: "none",
  width: "100%",
  height: "100%",
  "background-color": "inherit !important"
};
function toHTMLStyle(styles) {
  return Object.keys(styles).reduce((str, key) => {
    const style = styles[key];
    return str += `${key}:${style};`;
  }, "");
}
var Events;
(function(Events2) {
  Events2["WalletOpened"] = "wallet:open";
  Events2["WalletClosed"] = "wallet:close";
  Events2["WalletLoaded"] = "wallet:loaded";
  Events2["LayoutChanged"] = "layout:changed";
  Events2["NotificationUpdate"] = "notifications:update";
})(Events || (Events = {}));
var IFRAME_NAME = "mash_wallet";
var IFrame = class {
  constructor(src) {
    __publicField(this, "src");
    __publicField(this, "mounted", false);
    __publicField(this, "open", false);
    __publicField(this, "notificationCount", 0);
    __publicField(this, "desktopFloatSide", WalletButtonFloatSide.Right);
    __publicField(this, "desktopFloatPlacement", WalletButtonFloatPlacement.Default);
    __publicField(this, "desktopShiftConfiguration", {
      horizontal: 0,
      vertical: 0
    });
    __publicField(this, "mobileFloatSide", WalletButtonFloatSide.Right);
    __publicField(this, "container");
    __publicField(this, "iframe");
    __publicField(this, "engine", null);
    __publicField(this, "setContainerSize", (height, width, unit, margin) => {
      this.container.style.height = `${height}${unit}`;
      this.container.style.width = `${width}${unit}`;
      if (margin) {
        this.container.style.marginRight = "20px";
        this.container.style.marginLeft = "20px";
        this.container.style.marginBottom = "20px";
      } else {
        this.container.style.marginRight = "0";
        this.container.style.marginLeft = "0";
        this.container.style.marginBottom = "0";
      }
    });
    __publicField(this, "resize", () => {
      const mediaQuery = this.getMediaQuery();
      if (this.open) {
        if (mediaQuery.matches) {
          this.setContainerSize(100, 100, "%", false);
          return;
        }
        this.setContainerSize(MAX_CONTENT_HEIGHT, MAX_CONTENT_WIDTH, "px", true);
        return;
      }
      const maxWidth = Math.min(MAX_CONTENT_WIDTH, window.innerWidth);
      const maxHeight = this.notificationCount * MAX_HEIGHT_NOTIFICATION;
      const height = Math.max(maxHeight, MIN_CONTENT_HEIGHT);
      const width = this.notificationCount === 0 ? MIN_CONTENT_WIDTH : maxWidth;
      this.setContainerSize(height, width, "px", mediaQuery.matches ? false : true);
    });
    __publicField(this, "position", () => {
      const mediaQuery = this.getMediaQuery();
      if (mediaQuery.matches) {
        this.container.style.bottom = "0";
        switch (this.mobileFloatSide) {
          case WalletButtonFloatSide.Left: {
            this.container.style.right = "";
            this.container.style.left = "0";
            break;
          }
          case WalletButtonFloatSide.Right: {
            this.container.style.right = "0";
            this.container.style.left = "";
            break;
          }
        }
        return;
      }
      switch (this.desktopFloatSide) {
        case WalletButtonFloatSide.Left: {
          this.container.style.left = "0";
          this.container.style.right = "";
          break;
        }
        case WalletButtonFloatSide.Right: {
          this.container.style.right = "0";
          this.container.style.left = "";
          break;
        }
      }
      switch (this.desktopFloatPlacement) {
        case WalletButtonFloatPlacement.Ghost: {
          switch (this.desktopFloatSide) {
            case WalletButtonFloatSide.Left: {
              this.container.style.left = "0";
              this.container.style.right = "";
              break;
            }
            case WalletButtonFloatSide.Right: {
              this.container.style.right = "0";
              this.container.style.left = "";
              break;
            }
          }
          this.container.style.bottom = `${GHOST_SHIFT}px`;
          break;
        }
        case WalletButtonFloatPlacement.Intercom: {
          switch (this.desktopFloatSide) {
            case WalletButtonFloatSide.Left: {
              this.container.style.left = "0";
              this.container.style.right = "";
              break;
            }
            case WalletButtonFloatSide.Right: {
              this.container.style.right = "0";
              this.container.style.left = "";
              break;
            }
          }
          this.container.style.bottom = `${INTERCOM_SHIFT}px`;
          break;
        }
        case WalletButtonFloatPlacement.BasicShiftHorizontal: {
          switch (this.desktopFloatSide) {
            case WalletButtonFloatSide.Left: {
              this.container.style.left = `${BASIC_SHIFT_HORIZONTAL}px`;
              this.container.style.right = "";
              break;
            }
            case WalletButtonFloatSide.Right: {
              this.container.style.right = `${BASIC_SHIFT_HORIZONTAL}px`;
              this.container.style.left = "";
              break;
            }
          }
          break;
        }
        case WalletButtonFloatPlacement.BasicShiftVertical: {
          this.container.style.bottom = `${BASIC_SHIFT_VERTICAL}px`;
          break;
        }
        case WalletButtonFloatPlacement.Custom: {
          switch (this.desktopFloatSide) {
            case WalletButtonFloatSide.Left: {
              this.container.style.left = `${this.desktopShiftConfiguration.horizontal}px`;
              this.container.style.right = "";
              break;
            }
            case WalletButtonFloatSide.Right: {
              this.container.style.right = `${this.desktopShiftConfiguration.horizontal}px`;
              this.container.style.left = "";
              break;
            }
          }
          this.container.style.bottom = `${this.desktopShiftConfiguration.vertical}px`;
          break;
        }
      }
    });
    __publicField(this, "onMediaQueryChanged", (mq) => {
      var _a;
      this.resize();
      this.position();
      (_a = this.engine) == null ? void 0 : _a.send({
        name: Events.LayoutChanged,
        metadata: { mode: mq.matches ? Layout.Mobile : Layout.Web }
      });
    });
    __publicField(this, "setupPostMessageEngine", (onLoadCallback) => {
      var _a;
      (_a = this.engine) == null ? void 0 : _a.listen((evt) => {
        var _a2;
        const { data } = evt;
        if (!data)
          return;
        switch (data.name) {
          case Events.WalletOpened: {
            this.open = true;
            this.resize();
            break;
          }
          case Events.WalletClosed: {
            this.open = false;
            this.resize();
            break;
          }
          case Events.NotificationUpdate: {
            this.notificationCount = data.metadata.count || 0;
            this.resize();
            break;
          }
          case Events.WalletLoaded: {
            const mq = this.getMediaQuery();
            (_a2 = this.engine) == null ? void 0 : _a2.send({
              name: Events.LayoutChanged,
              metadata: { mode: mq.matches ? Layout.Mobile : Layout.Web }
            });
            onLoadCallback(this.iframe);
            break;
          }
        }
      });
    });
    this.src = new URL(src);
    this.container = document.createElement("div");
    this.container.setAttribute("class", "mash mash-root");
    this.container.setAttribute("style", toHTMLStyle(CONTAINER_STYLE));
    this.iframe = document.createElement("iframe");
    this.iframe.setAttribute("class", "mash-this.iframe");
    this.iframe.setAttribute("style", toHTMLStyle(IFRAME_STYLE));
    this.iframe.setAttribute("src", src);
    this.iframe.setAttribute("title", "Mash Wallet");
    this.iframe.setAttribute("name", IFRAME_NAME);
    this.iframe.allowFullscreen = true;
  }
  getMediaQuery() {
    return window.matchMedia(`(max-width: ${FULLSCREEN_THRESHOLD}px)`);
  }
  setupListeners() {
    this.getMediaQuery().addEventListener("change", this.onMediaQueryChanged);
  }
  normalizeShift(value, max) {
    if (value < 0) {
      return 0;
    }
    if (value > max) {
      return max;
    }
    return value;
  }
  mount(onLoad, position) {
    if (!this.mounted) {
      this.container.appendChild(this.iframe);
      document.body.appendChild(this.container);
      this.mounted = true;
    }
    this.desktopFloatSide = position.desktop.floatSide;
    this.desktopFloatPlacement = position.desktop.floatPlacement;
    this.desktopShiftConfiguration.horizontal = this.normalizeShift(position.desktop.customShiftConfiguration.horizontal, MAX_SHIFT_HORIZONTAL);
    this.desktopShiftConfiguration.vertical = this.normalizeShift(position.desktop.customShiftConfiguration.vertical, MAX_SHIFT_VERTICAL);
    this.mobileFloatSide = position.mobile.floatSide;
    this.engine = new dist_default({
      name: Targets.HostSiteFrame,
      targetName: Targets.Wallet,
      targetWindow: this.iframe.contentWindow,
      targetOrigin: this.src.origin
    });
    this.setupListeners();
    this.setupPostMessageEngine(onLoad);
    this.resize();
    this.position();
  }
};

// node_modules/@getmash/client-sdk/dist/iframe/position.js
var FloatLocation;
(function(FloatLocation2) {
  FloatLocation2["BottomRight"] = "bottom-right";
  FloatLocation2["BottomLeft"] = "bottom-left";
})(FloatLocation || (FloatLocation = {}));
function normalizeFloatSide(location) {
  if (!location || !Object.values(WalletButtonFloatSide).includes(location)) {
    return WalletButtonFloatSide.Right;
  }
  return location;
}
function normalizeFloatPlacement(location) {
  if (!location || !Object.values(WalletButtonFloatPlacement).includes(location)) {
    return WalletButtonFloatPlacement.Default;
  }
  return location;
}
function getDesktopLocation(desktop) {
  var _a, _b;
  return {
    floatSide: normalizeFloatSide(desktop == null ? void 0 : desktop.floatSide),
    floatPlacement: normalizeFloatPlacement(desktop == null ? void 0 : desktop.floatPlacement),
    customShiftConfiguration: {
      horizontal: ((_a = desktop == null ? void 0 : desktop.customShiftConfiguration) == null ? void 0 : _a.horizontal) || 0,
      vertical: ((_b = desktop == null ? void 0 : desktop.customShiftConfiguration) == null ? void 0 : _b.vertical) || 0
    }
  };
}
function getMobileLocation(mobile) {
  return {
    floatSide: normalizeFloatSide(mobile == null ? void 0 : mobile.floatSide)
  };
}
function getWalletPosition(desktop, mobile) {
  return {
    desktop: getDesktopLocation(desktop),
    mobile: getMobileLocation(mobile)
  };
}
function formatPosition(position) {
  var _a, _b, _c, _d, _e, _f, _g;
  const formattedPosition = getWalletPosition();
  if (((_a = position == null ? void 0 : position.desktop) == null ? void 0 : _a.floatLocation) === FloatLocation.BottomLeft) {
    formattedPosition.desktop.floatSide = WalletButtonFloatSide.Left;
  } else if (((_b = position == null ? void 0 : position.desktop) == null ? void 0 : _b.floatLocation) === FloatLocation.BottomRight) {
    formattedPosition.desktop.floatSide = WalletButtonFloatSide.Right;
  }
  if (((_c = position == null ? void 0 : position.desktop) == null ? void 0 : _c.shiftLeft) || ((_d = position == null ? void 0 : position.desktop) == null ? void 0 : _d.shiftRight)) {
    formattedPosition.desktop.floatPlacement = WalletButtonFloatPlacement.Custom;
    formattedPosition.desktop.customShiftConfiguration.horizontal = position.desktop.shiftLeft || 0;
    formattedPosition.desktop.customShiftConfiguration.horizontal = position.desktop.shiftRight || 0;
  }
  if ((_e = position == null ? void 0 : position.desktop) == null ? void 0 : _e.shiftUp) {
    formattedPosition.desktop.floatPlacement = WalletButtonFloatPlacement.Custom;
    formattedPosition.desktop.customShiftConfiguration.vertical = position.desktop.shiftUp || 0;
  }
  if (((_f = position == null ? void 0 : position.mobile) == null ? void 0 : _f.floatLocation) === FloatLocation.BottomLeft) {
    formattedPosition.mobile.floatSide = WalletButtonFloatSide.Left;
  } else if (((_g = position == null ? void 0 : position.mobile) == null ? void 0 : _g.floatLocation) === FloatLocation.BottomRight) {
    formattedPosition.mobile.floatSide = WalletButtonFloatSide.Right;
  }
  return formattedPosition;
}

// node_modules/@getmash/jsonrpc-engine/dist/JsonRPC.js
function NewRequest(method, params) {
  return { jsonrpc: "2.0", id: v4_default(), method, params };
}
function NewErrorResponse(id, error) {
  return { jsonrpc: "2.0", id, error };
}
var JsonRPCError = class extends Error {
  constructor(reqID, code, message, data) {
    super(message);
    __publicField(this, "jsonrpc");
    this.jsonrpc = NewErrorResponse(reqID, { code, message, data });
  }
};

// node_modules/@getmash/jsonrpc-engine/dist/JsonRPCEngine.js
var JsonRPCEngine = class extends dist_default {
  constructor(options) {
    const { timeout, ...rest } = options;
    super(rest);
    __publicField(this, "timeout");
    this.timeout = timeout || null;
  }
  static _tryResolveMessage(data) {
    return [data.result, data.error];
  }
  call(method, ...args) {
    return new Promise((resolve, reject) => {
      const request = NewRequest(method, args);
      const timer = this.timeout ? setTimeout(() => {
        const timeoutError = new JsonRPCError(request.id, 500, "Request timed out.");
        reject(timeoutError.jsonrpc.error);
      }, this.timeout) : null;
      this._listen((evt) => {
        const payload = evt.data;
        if (!payload || payload.id !== request.id)
          return;
        if (timer) {
          clearTimeout(timer);
        }
        const [result, err] = JsonRPCEngine._tryResolveMessage(payload);
        this.unsubscribe(request.id);
        if (err) {
          reject(err);
          return;
        }
        if (!result) {
          const unknownError = new JsonRPCError(request.id, 500, "Internal Error");
          reject(unknownError.jsonrpc.error);
          return;
        }
        resolve(result);
      }, request.id);
      this.send(request);
    });
  }
};

// node_modules/@getmash/jsonrpc-engine/dist/index.js
var dist_default2 = JsonRPCEngine;

// node_modules/@getmash/client-sdk/dist/rpc/methods.js
var RPCMethods = {
  Access: "access",
  Boost: "boost",
  Donate: "donate",
  GetAutopayAuthorization: "get-autopay-authorization",
  GetResourceCost: "get-resource-cost",
  Init: "init"
};
var methods_default = RPCMethods;

// node_modules/@getmash/client-sdk/dist/rpc/targets.js
var Targets2 = {
  MashSDK: "@mash/sdk-rpc",
  Wallet: "@mash/wallet-rpc"
};
var targets_default = Targets2;

// node_modules/@getmash/client-sdk/dist/rpc/RPCApi.js
var FiatCurrency;
(function(FiatCurrency2) {
  FiatCurrency2["Usd"] = "USD";
})(FiatCurrency || (FiatCurrency = {}));
var MashRPCApi = class {
  constructor(origin, target) {
    __publicField(this, "engine");
    this.engine = new dist_default2({
      name: targets_default.MashSDK,
      targetName: targets_default.Wallet,
      targetWindow: target || void 0,
      targetOrigin: origin
    });
  }
  init(earnerID, position) {
    return this.engine.call(methods_default.Init, { id: earnerID, position });
  }
  access(resourceID) {
    return this.engine.call(methods_default.Access, resourceID);
  }
  donate() {
    return this.engine.call(methods_default.Donate);
  }
  getAutopayAuthorization() {
    return this.engine.call(methods_default.GetAutopayAuthorization).then((res) => res.authorization);
  }
  getResourceCost(resourceID) {
    return this.engine.call(methods_default.GetResourceCost, resourceID).then((res) => res.cost);
  }
};
var RPCApi_default = MashRPCApi;

// node_modules/@getmash/client-sdk/dist/widgets/preconnect.js
function preconnect(baseURL) {
  const link = window.document.createElement("link");
  link.rel = "preconnect";
  link.href = baseURL;
  window.document.head.appendChild(link);
}

// node_modules/@ctrl/tinycolor/dist/module/util.js
function bound01(n, max) {
  if (isOnePointZero(n)) {
    n = "100%";
  }
  var isPercent = isPercentage(n);
  n = max === 360 ? n : Math.min(max, Math.max(0, parseFloat(n)));
  if (isPercent) {
    n = parseInt(String(n * max), 10) / 100;
  }
  if (Math.abs(n - max) < 1e-6) {
    return 1;
  }
  if (max === 360) {
    n = (n < 0 ? n % max + max : n % max) / parseFloat(String(max));
  } else {
    n = n % max / parseFloat(String(max));
  }
  return n;
}
function clamp01(val) {
  return Math.min(1, Math.max(0, val));
}
function isOnePointZero(n) {
  return typeof n === "string" && n.indexOf(".") !== -1 && parseFloat(n) === 1;
}
function isPercentage(n) {
  return typeof n === "string" && n.indexOf("%") !== -1;
}
function boundAlpha(a) {
  a = parseFloat(a);
  if (isNaN(a) || a < 0 || a > 1) {
    a = 1;
  }
  return a;
}
function convertToPercentage(n) {
  if (n <= 1) {
    return "".concat(Number(n) * 100, "%");
  }
  return n;
}
function pad2(c) {
  return c.length === 1 ? "0" + c : String(c);
}

// node_modules/@ctrl/tinycolor/dist/module/conversion.js
function rgbToRgb(r, g, b) {
  return {
    r: bound01(r, 255) * 255,
    g: bound01(g, 255) * 255,
    b: bound01(b, 255) * 255
  };
}
function rgbToHsl(r, g, b) {
  r = bound01(r, 255);
  g = bound01(g, 255);
  b = bound01(b, 255);
  var max = Math.max(r, g, b);
  var min = Math.min(r, g, b);
  var h = 0;
  var s = 0;
  var l = (max + min) / 2;
  if (max === min) {
    s = 0;
    h = 0;
  } else {
    var d = max - min;
    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
    switch (max) {
      case r:
        h = (g - b) / d + (g < b ? 6 : 0);
        break;
      case g:
        h = (b - r) / d + 2;
        break;
      case b:
        h = (r - g) / d + 4;
        break;
      default:
        break;
    }
    h /= 6;
  }
  return { h, s, l };
}
function hue2rgb(p, q, t) {
  if (t < 0) {
    t += 1;
  }
  if (t > 1) {
    t -= 1;
  }
  if (t < 1 / 6) {
    return p + (q - p) * (6 * t);
  }
  if (t < 1 / 2) {
    return q;
  }
  if (t < 2 / 3) {
    return p + (q - p) * (2 / 3 - t) * 6;
  }
  return p;
}
function hslToRgb(h, s, l) {
  var r;
  var g;
  var b;
  h = bound01(h, 360);
  s = bound01(s, 100);
  l = bound01(l, 100);
  if (s === 0) {
    g = l;
    b = l;
    r = l;
  } else {
    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
    var p = 2 * l - q;
    r = hue2rgb(p, q, h + 1 / 3);
    g = hue2rgb(p, q, h);
    b = hue2rgb(p, q, h - 1 / 3);
  }
  return { r: r * 255, g: g * 255, b: b * 255 };
}
function rgbToHsv(r, g, b) {
  r = bound01(r, 255);
  g = bound01(g, 255);
  b = bound01(b, 255);
  var max = Math.max(r, g, b);
  var min = Math.min(r, g, b);
  var h = 0;
  var v = max;
  var d = max - min;
  var s = max === 0 ? 0 : d / max;
  if (max === min) {
    h = 0;
  } else {
    switch (max) {
      case r:
        h = (g - b) / d + (g < b ? 6 : 0);
        break;
      case g:
        h = (b - r) / d + 2;
        break;
      case b:
        h = (r - g) / d + 4;
        break;
      default:
        break;
    }
    h /= 6;
  }
  return { h, s, v };
}
function hsvToRgb(h, s, v) {
  h = bound01(h, 360) * 6;
  s = bound01(s, 100);
  v = bound01(v, 100);
  var i = Math.floor(h);
  var f2 = h - i;
  var p = v * (1 - s);
  var q = v * (1 - f2 * s);
  var t = v * (1 - (1 - f2) * s);
  var mod = i % 6;
  var r = [v, q, p, p, t, v][mod];
  var g = [t, v, v, q, p, p][mod];
  var b = [p, p, t, v, v, q][mod];
  return { r: r * 255, g: g * 255, b: b * 255 };
}
function rgbToHex(r, g, b, allow3Char) {
  var hex = [
    pad2(Math.round(r).toString(16)),
    pad2(Math.round(g).toString(16)),
    pad2(Math.round(b).toString(16))
  ];
  if (allow3Char && hex[0].startsWith(hex[0].charAt(1)) && hex[1].startsWith(hex[1].charAt(1)) && hex[2].startsWith(hex[2].charAt(1))) {
    return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
  }
  return hex.join("");
}
function rgbaToHex(r, g, b, a, allow4Char) {
  var hex = [
    pad2(Math.round(r).toString(16)),
    pad2(Math.round(g).toString(16)),
    pad2(Math.round(b).toString(16)),
    pad2(convertDecimalToHex(a))
  ];
  if (allow4Char && hex[0].startsWith(hex[0].charAt(1)) && hex[1].startsWith(hex[1].charAt(1)) && hex[2].startsWith(hex[2].charAt(1)) && hex[3].startsWith(hex[3].charAt(1))) {
    return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
  }
  return hex.join("");
}
function convertDecimalToHex(d) {
  return Math.round(parseFloat(d) * 255).toString(16);
}
function convertHexToDecimal(h) {
  return parseIntFromHex(h) / 255;
}
function parseIntFromHex(val) {
  return parseInt(val, 16);
}
function numberInputToObject(color) {
  return {
    r: color >> 16,
    g: (color & 65280) >> 8,
    b: color & 255
  };
}

// node_modules/@ctrl/tinycolor/dist/module/css-color-names.js
var names = {
  aliceblue: "#f0f8ff",
  antiquewhite: "#faebd7",
  aqua: "#00ffff",
  aquamarine: "#7fffd4",
  azure: "#f0ffff",
  beige: "#f5f5dc",
  bisque: "#ffe4c4",
  black: "#000000",
  blanchedalmond: "#ffebcd",
  blue: "#0000ff",
  blueviolet: "#8a2be2",
  brown: "#a52a2a",
  burlywood: "#deb887",
  cadetblue: "#5f9ea0",
  chartreuse: "#7fff00",
  chocolate: "#d2691e",
  coral: "#ff7f50",
  cornflowerblue: "#6495ed",
  cornsilk: "#fff8dc",
  crimson: "#dc143c",
  cyan: "#00ffff",
  darkblue: "#00008b",
  darkcyan: "#008b8b",
  darkgoldenrod: "#b8860b",
  darkgray: "#a9a9a9",
  darkgreen: "#006400",
  darkgrey: "#a9a9a9",
  darkkhaki: "#bdb76b",
  darkmagenta: "#8b008b",
  darkolivegreen: "#556b2f",
  darkorange: "#ff8c00",
  darkorchid: "#9932cc",
  darkred: "#8b0000",
  darksalmon: "#e9967a",
  darkseagreen: "#8fbc8f",
  darkslateblue: "#483d8b",
  darkslategray: "#2f4f4f",
  darkslategrey: "#2f4f4f",
  darkturquoise: "#00ced1",
  darkviolet: "#9400d3",
  deeppink: "#ff1493",
  deepskyblue: "#00bfff",
  dimgray: "#696969",
  dimgrey: "#696969",
  dodgerblue: "#1e90ff",
  firebrick: "#b22222",
  floralwhite: "#fffaf0",
  forestgreen: "#228b22",
  fuchsia: "#ff00ff",
  gainsboro: "#dcdcdc",
  ghostwhite: "#f8f8ff",
  goldenrod: "#daa520",
  gold: "#ffd700",
  gray: "#808080",
  green: "#008000",
  greenyellow: "#adff2f",
  grey: "#808080",
  honeydew: "#f0fff0",
  hotpink: "#ff69b4",
  indianred: "#cd5c5c",
  indigo: "#4b0082",
  ivory: "#fffff0",
  khaki: "#f0e68c",
  lavenderblush: "#fff0f5",
  lavender: "#e6e6fa",
  lawngreen: "#7cfc00",
  lemonchiffon: "#fffacd",
  lightblue: "#add8e6",
  lightcoral: "#f08080",
  lightcyan: "#e0ffff",
  lightgoldenrodyellow: "#fafad2",
  lightgray: "#d3d3d3",
  lightgreen: "#90ee90",
  lightgrey: "#d3d3d3",
  lightpink: "#ffb6c1",
  lightsalmon: "#ffa07a",
  lightseagreen: "#20b2aa",
  lightskyblue: "#87cefa",
  lightslategray: "#778899",
  lightslategrey: "#778899",
  lightsteelblue: "#b0c4de",
  lightyellow: "#ffffe0",
  lime: "#00ff00",
  limegreen: "#32cd32",
  linen: "#faf0e6",
  magenta: "#ff00ff",
  maroon: "#800000",
  mediumaquamarine: "#66cdaa",
  mediumblue: "#0000cd",
  mediumorchid: "#ba55d3",
  mediumpurple: "#9370db",
  mediumseagreen: "#3cb371",
  mediumslateblue: "#7b68ee",
  mediumspringgreen: "#00fa9a",
  mediumturquoise: "#48d1cc",
  mediumvioletred: "#c71585",
  midnightblue: "#191970",
  mintcream: "#f5fffa",
  mistyrose: "#ffe4e1",
  moccasin: "#ffe4b5",
  navajowhite: "#ffdead",
  navy: "#000080",
  oldlace: "#fdf5e6",
  olive: "#808000",
  olivedrab: "#6b8e23",
  orange: "#ffa500",
  orangered: "#ff4500",
  orchid: "#da70d6",
  palegoldenrod: "#eee8aa",
  palegreen: "#98fb98",
  paleturquoise: "#afeeee",
  palevioletred: "#db7093",
  papayawhip: "#ffefd5",
  peachpuff: "#ffdab9",
  peru: "#cd853f",
  pink: "#ffc0cb",
  plum: "#dda0dd",
  powderblue: "#b0e0e6",
  purple: "#800080",
  rebeccapurple: "#663399",
  red: "#ff0000",
  rosybrown: "#bc8f8f",
  royalblue: "#4169e1",
  saddlebrown: "#8b4513",
  salmon: "#fa8072",
  sandybrown: "#f4a460",
  seagreen: "#2e8b57",
  seashell: "#fff5ee",
  sienna: "#a0522d",
  silver: "#c0c0c0",
  skyblue: "#87ceeb",
  slateblue: "#6a5acd",
  slategray: "#708090",
  slategrey: "#708090",
  snow: "#fffafa",
  springgreen: "#00ff7f",
  steelblue: "#4682b4",
  tan: "#d2b48c",
  teal: "#008080",
  thistle: "#d8bfd8",
  tomato: "#ff6347",
  turquoise: "#40e0d0",
  violet: "#ee82ee",
  wheat: "#f5deb3",
  white: "#ffffff",
  whitesmoke: "#f5f5f5",
  yellow: "#ffff00",
  yellowgreen: "#9acd32"
};

// node_modules/@ctrl/tinycolor/dist/module/format-input.js
function inputToRGB(color) {
  var rgb = { r: 0, g: 0, b: 0 };
  var a = 1;
  var s = null;
  var v = null;
  var l = null;
  var ok = false;
  var format = false;
  if (typeof color === "string") {
    color = stringInputToObject(color);
  }
  if (typeof color === "object") {
    if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
      rgb = rgbToRgb(color.r, color.g, color.b);
      ok = true;
      format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
    } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
      s = convertToPercentage(color.s);
      v = convertToPercentage(color.v);
      rgb = hsvToRgb(color.h, s, v);
      ok = true;
      format = "hsv";
    } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
      s = convertToPercentage(color.s);
      l = convertToPercentage(color.l);
      rgb = hslToRgb(color.h, s, l);
      ok = true;
      format = "hsl";
    }
    if (Object.prototype.hasOwnProperty.call(color, "a")) {
      a = color.a;
    }
  }
  a = boundAlpha(a);
  return {
    ok,
    format: color.format || format,
    r: Math.min(255, Math.max(rgb.r, 0)),
    g: Math.min(255, Math.max(rgb.g, 0)),
    b: Math.min(255, Math.max(rgb.b, 0)),
    a
  };
}
var CSS_INTEGER = "[-\\+]?\\d+%?";
var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";
var CSS_UNIT = "(?:".concat(CSS_NUMBER, ")|(?:").concat(CSS_INTEGER, ")");
var PERMISSIVE_MATCH3 = "[\\s|\\(]+(".concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")\\s*\\)?");
var PERMISSIVE_MATCH4 = "[\\s|\\(]+(".concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")\\s*\\)?");
var matchers = {
  CSS_UNIT: new RegExp(CSS_UNIT),
  rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
  rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
  hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
  hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
  hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
  hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
  hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
  hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
  hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
  hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
};
function stringInputToObject(color) {
  color = color.trim().toLowerCase();
  if (color.length === 0) {
    return false;
  }
  var named = false;
  if (names[color]) {
    color = names[color];
    named = true;
  } else if (color === "transparent") {
    return { r: 0, g: 0, b: 0, a: 0, format: "name" };
  }
  var match = matchers.rgb.exec(color);
  if (match) {
    return { r: match[1], g: match[2], b: match[3] };
  }
  match = matchers.rgba.exec(color);
  if (match) {
    return { r: match[1], g: match[2], b: match[3], a: match[4] };
  }
  match = matchers.hsl.exec(color);
  if (match) {
    return { h: match[1], s: match[2], l: match[3] };
  }
  match = matchers.hsla.exec(color);
  if (match) {
    return { h: match[1], s: match[2], l: match[3], a: match[4] };
  }
  match = matchers.hsv.exec(color);
  if (match) {
    return { h: match[1], s: match[2], v: match[3] };
  }
  match = matchers.hsva.exec(color);
  if (match) {
    return { h: match[1], s: match[2], v: match[3], a: match[4] };
  }
  match = matchers.hex8.exec(color);
  if (match) {
    return {
      r: parseIntFromHex(match[1]),
      g: parseIntFromHex(match[2]),
      b: parseIntFromHex(match[3]),
      a: convertHexToDecimal(match[4]),
      format: named ? "name" : "hex8"
    };
  }
  match = matchers.hex6.exec(color);
  if (match) {
    return {
      r: parseIntFromHex(match[1]),
      g: parseIntFromHex(match[2]),
      b: parseIntFromHex(match[3]),
      format: named ? "name" : "hex"
    };
  }
  match = matchers.hex4.exec(color);
  if (match) {
    return {
      r: parseIntFromHex(match[1] + match[1]),
      g: parseIntFromHex(match[2] + match[2]),
      b: parseIntFromHex(match[3] + match[3]),
      a: convertHexToDecimal(match[4] + match[4]),
      format: named ? "name" : "hex8"
    };
  }
  match = matchers.hex3.exec(color);
  if (match) {
    return {
      r: parseIntFromHex(match[1] + match[1]),
      g: parseIntFromHex(match[2] + match[2]),
      b: parseIntFromHex(match[3] + match[3]),
      format: named ? "name" : "hex"
    };
  }
  return false;
}
function isValidCSSUnit(color) {
  return Boolean(matchers.CSS_UNIT.exec(String(color)));
}

// node_modules/@ctrl/tinycolor/dist/module/index.js
var TinyColor = function() {
  function TinyColor2(color, opts) {
    if (color === void 0) {
      color = "";
    }
    if (opts === void 0) {
      opts = {};
    }
    var _a;
    if (color instanceof TinyColor2) {
      return color;
    }
    if (typeof color === "number") {
      color = numberInputToObject(color);
    }
    this.originalInput = color;
    var rgb = inputToRGB(color);
    this.originalInput = color;
    this.r = rgb.r;
    this.g = rgb.g;
    this.b = rgb.b;
    this.a = rgb.a;
    this.roundA = Math.round(100 * this.a) / 100;
    this.format = (_a = opts.format) !== null && _a !== void 0 ? _a : rgb.format;
    this.gradientType = opts.gradientType;
    if (this.r < 1) {
      this.r = Math.round(this.r);
    }
    if (this.g < 1) {
      this.g = Math.round(this.g);
    }
    if (this.b < 1) {
      this.b = Math.round(this.b);
    }
    this.isValid = rgb.ok;
  }
  TinyColor2.prototype.isDark = function() {
    return this.getBrightness() < 128;
  };
  TinyColor2.prototype.isLight = function() {
    return !this.isDark();
  };
  TinyColor2.prototype.getBrightness = function() {
    var rgb = this.toRgb();
    return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1e3;
  };
  TinyColor2.prototype.getLuminance = function() {
    var rgb = this.toRgb();
    var R;
    var G;
    var B;
    var RsRGB = rgb.r / 255;
    var GsRGB = rgb.g / 255;
    var BsRGB = rgb.b / 255;
    if (RsRGB <= 0.03928) {
      R = RsRGB / 12.92;
    } else {
      R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);
    }
    if (GsRGB <= 0.03928) {
      G = GsRGB / 12.92;
    } else {
      G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);
    }
    if (BsRGB <= 0.03928) {
      B = BsRGB / 12.92;
    } else {
      B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);
    }
    return 0.2126 * R + 0.7152 * G + 0.0722 * B;
  };
  TinyColor2.prototype.getAlpha = function() {
    return this.a;
  };
  TinyColor2.prototype.setAlpha = function(alpha) {
    this.a = boundAlpha(alpha);
    this.roundA = Math.round(100 * this.a) / 100;
    return this;
  };
  TinyColor2.prototype.isMonochrome = function() {
    var s = this.toHsl().s;
    return s === 0;
  };
  TinyColor2.prototype.toHsv = function() {
    var hsv = rgbToHsv(this.r, this.g, this.b);
    return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this.a };
  };
  TinyColor2.prototype.toHsvString = function() {
    var hsv = rgbToHsv(this.r, this.g, this.b);
    var h = Math.round(hsv.h * 360);
    var s = Math.round(hsv.s * 100);
    var v = Math.round(hsv.v * 100);
    return this.a === 1 ? "hsv(".concat(h, ", ").concat(s, "%, ").concat(v, "%)") : "hsva(".concat(h, ", ").concat(s, "%, ").concat(v, "%, ").concat(this.roundA, ")");
  };
  TinyColor2.prototype.toHsl = function() {
    var hsl = rgbToHsl(this.r, this.g, this.b);
    return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this.a };
  };
  TinyColor2.prototype.toHslString = function() {
    var hsl = rgbToHsl(this.r, this.g, this.b);
    var h = Math.round(hsl.h * 360);
    var s = Math.round(hsl.s * 100);
    var l = Math.round(hsl.l * 100);
    return this.a === 1 ? "hsl(".concat(h, ", ").concat(s, "%, ").concat(l, "%)") : "hsla(".concat(h, ", ").concat(s, "%, ").concat(l, "%, ").concat(this.roundA, ")");
  };
  TinyColor2.prototype.toHex = function(allow3Char) {
    if (allow3Char === void 0) {
      allow3Char = false;
    }
    return rgbToHex(this.r, this.g, this.b, allow3Char);
  };
  TinyColor2.prototype.toHexString = function(allow3Char) {
    if (allow3Char === void 0) {
      allow3Char = false;
    }
    return "#" + this.toHex(allow3Char);
  };
  TinyColor2.prototype.toHex8 = function(allow4Char) {
    if (allow4Char === void 0) {
      allow4Char = false;
    }
    return rgbaToHex(this.r, this.g, this.b, this.a, allow4Char);
  };
  TinyColor2.prototype.toHex8String = function(allow4Char) {
    if (allow4Char === void 0) {
      allow4Char = false;
    }
    return "#" + this.toHex8(allow4Char);
  };
  TinyColor2.prototype.toRgb = function() {
    return {
      r: Math.round(this.r),
      g: Math.round(this.g),
      b: Math.round(this.b),
      a: this.a
    };
  };
  TinyColor2.prototype.toRgbString = function() {
    var r = Math.round(this.r);
    var g = Math.round(this.g);
    var b = Math.round(this.b);
    return this.a === 1 ? "rgb(".concat(r, ", ").concat(g, ", ").concat(b, ")") : "rgba(".concat(r, ", ").concat(g, ", ").concat(b, ", ").concat(this.roundA, ")");
  };
  TinyColor2.prototype.toPercentageRgb = function() {
    var fmt = function(x) {
      return "".concat(Math.round(bound01(x, 255) * 100), "%");
    };
    return {
      r: fmt(this.r),
      g: fmt(this.g),
      b: fmt(this.b),
      a: this.a
    };
  };
  TinyColor2.prototype.toPercentageRgbString = function() {
    var rnd = function(x) {
      return Math.round(bound01(x, 255) * 100);
    };
    return this.a === 1 ? "rgb(".concat(rnd(this.r), "%, ").concat(rnd(this.g), "%, ").concat(rnd(this.b), "%)") : "rgba(".concat(rnd(this.r), "%, ").concat(rnd(this.g), "%, ").concat(rnd(this.b), "%, ").concat(this.roundA, ")");
  };
  TinyColor2.prototype.toName = function() {
    if (this.a === 0) {
      return "transparent";
    }
    if (this.a < 1) {
      return false;
    }
    var hex = "#" + rgbToHex(this.r, this.g, this.b, false);
    for (var _i = 0, _a = Object.entries(names); _i < _a.length; _i++) {
      var _b = _a[_i], key = _b[0], value = _b[1];
      if (hex === value) {
        return key;
      }
    }
    return false;
  };
  TinyColor2.prototype.toString = function(format) {
    var formatSet = Boolean(format);
    format = format !== null && format !== void 0 ? format : this.format;
    var formattedString = false;
    var hasAlpha = this.a < 1 && this.a >= 0;
    var needsAlphaFormat = !formatSet && hasAlpha && (format.startsWith("hex") || format === "name");
    if (needsAlphaFormat) {
      if (format === "name" && this.a === 0) {
        return this.toName();
      }
      return this.toRgbString();
    }
    if (format === "rgb") {
      formattedString = this.toRgbString();
    }
    if (format === "prgb") {
      formattedString = this.toPercentageRgbString();
    }
    if (format === "hex" || format === "hex6") {
      formattedString = this.toHexString();
    }
    if (format === "hex3") {
      formattedString = this.toHexString(true);
    }
    if (format === "hex4") {
      formattedString = this.toHex8String(true);
    }
    if (format === "hex8") {
      formattedString = this.toHex8String();
    }
    if (format === "name") {
      formattedString = this.toName();
    }
    if (format === "hsl") {
      formattedString = this.toHslString();
    }
    if (format === "hsv") {
      formattedString = this.toHsvString();
    }
    return formattedString || this.toHexString();
  };
  TinyColor2.prototype.toNumber = function() {
    return (Math.round(this.r) << 16) + (Math.round(this.g) << 8) + Math.round(this.b);
  };
  TinyColor2.prototype.clone = function() {
    return new TinyColor2(this.toString());
  };
  TinyColor2.prototype.lighten = function(amount) {
    if (amount === void 0) {
      amount = 10;
    }
    var hsl = this.toHsl();
    hsl.l += amount / 100;
    hsl.l = clamp01(hsl.l);
    return new TinyColor2(hsl);
  };
  TinyColor2.prototype.brighten = function(amount) {
    if (amount === void 0) {
      amount = 10;
    }
    var rgb = this.toRgb();
    rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));
    rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));
    rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));
    return new TinyColor2(rgb);
  };
  TinyColor2.prototype.darken = function(amount) {
    if (amount === void 0) {
      amount = 10;
    }
    var hsl = this.toHsl();
    hsl.l -= amount / 100;
    hsl.l = clamp01(hsl.l);
    return new TinyColor2(hsl);
  };
  TinyColor2.prototype.tint = function(amount) {
    if (amount === void 0) {
      amount = 10;
    }
    return this.mix("white", amount);
  };
  TinyColor2.prototype.shade = function(amount) {
    if (amount === void 0) {
      amount = 10;
    }
    return this.mix("black", amount);
  };
  TinyColor2.prototype.desaturate = function(amount) {
    if (amount === void 0) {
      amount = 10;
    }
    var hsl = this.toHsl();
    hsl.s -= amount / 100;
    hsl.s = clamp01(hsl.s);
    return new TinyColor2(hsl);
  };
  TinyColor2.prototype.saturate = function(amount) {
    if (amount === void 0) {
      amount = 10;
    }
    var hsl = this.toHsl();
    hsl.s += amount / 100;
    hsl.s = clamp01(hsl.s);
    return new TinyColor2(hsl);
  };
  TinyColor2.prototype.greyscale = function() {
    return this.desaturate(100);
  };
  TinyColor2.prototype.spin = function(amount) {
    var hsl = this.toHsl();
    var hue = (hsl.h + amount) % 360;
    hsl.h = hue < 0 ? 360 + hue : hue;
    return new TinyColor2(hsl);
  };
  TinyColor2.prototype.mix = function(color, amount) {
    if (amount === void 0) {
      amount = 50;
    }
    var rgb1 = this.toRgb();
    var rgb2 = new TinyColor2(color).toRgb();
    var p = amount / 100;
    var rgba = {
      r: (rgb2.r - rgb1.r) * p + rgb1.r,
      g: (rgb2.g - rgb1.g) * p + rgb1.g,
      b: (rgb2.b - rgb1.b) * p + rgb1.b,
      a: (rgb2.a - rgb1.a) * p + rgb1.a
    };
    return new TinyColor2(rgba);
  };
  TinyColor2.prototype.analogous = function(results, slices) {
    if (results === void 0) {
      results = 6;
    }
    if (slices === void 0) {
      slices = 30;
    }
    var hsl = this.toHsl();
    var part = 360 / slices;
    var ret = [this];
    for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results; ) {
      hsl.h = (hsl.h + part) % 360;
      ret.push(new TinyColor2(hsl));
    }
    return ret;
  };
  TinyColor2.prototype.complement = function() {
    var hsl = this.toHsl();
    hsl.h = (hsl.h + 180) % 360;
    return new TinyColor2(hsl);
  };
  TinyColor2.prototype.monochromatic = function(results) {
    if (results === void 0) {
      results = 6;
    }
    var hsv = this.toHsv();
    var h = hsv.h;
    var s = hsv.s;
    var v = hsv.v;
    var res = [];
    var modification = 1 / results;
    while (results--) {
      res.push(new TinyColor2({ h, s, v }));
      v = (v + modification) % 1;
    }
    return res;
  };
  TinyColor2.prototype.splitcomplement = function() {
    var hsl = this.toHsl();
    var h = hsl.h;
    return [
      this,
      new TinyColor2({ h: (h + 72) % 360, s: hsl.s, l: hsl.l }),
      new TinyColor2({ h: (h + 216) % 360, s: hsl.s, l: hsl.l })
    ];
  };
  TinyColor2.prototype.onBackground = function(background) {
    var fg = this.toRgb();
    var bg = new TinyColor2(background).toRgb();
    return new TinyColor2({
      r: bg.r + (fg.r - bg.r) * fg.a,
      g: bg.g + (fg.g - bg.g) * fg.a,
      b: bg.b + (fg.b - bg.b) * fg.a
    });
  };
  TinyColor2.prototype.triad = function() {
    return this.polyad(3);
  };
  TinyColor2.prototype.tetrad = function() {
    return this.polyad(4);
  };
  TinyColor2.prototype.polyad = function(n) {
    var hsl = this.toHsl();
    var h = hsl.h;
    var result = [this];
    var increment = 360 / n;
    for (var i = 1; i < n; i++) {
      result.push(new TinyColor2({ h: (h + i * increment) % 360, s: hsl.s, l: hsl.l }));
    }
    return result;
  };
  TinyColor2.prototype.equals = function(color) {
    return this.toRgbString() === new TinyColor2(color).toRgbString();
  };
  return TinyColor2;
}();

// node_modules/@getmash/client-sdk/dist/widgets/theme.js
function injectTheme(baseURL, theme) {
  const color = new TinyColor(theme.primaryColor);
  const hsl = color.toHsl();
  const style = window.document.createElement("style");
  style.innerHTML = `
:root {
  --mash-primary-color-h: ${hsl.h};
  --mash-primary-color-s: ${hsl.s * 100}%;
  --mash-primary-color-l: ${hsl.l * 100}%;
  --mash-primary-color: ${color.toHexString()};
  --mash-font-family: ${theme.fontFamily};
}  
`;
  window.document.head.appendChild(style);
  const link = window.document.createElement("link");
  link.rel = "stylesheet";
  link.href = `${baseURL}/theme/theme.css`;
  window.document.head.appendChild(link);
}

// node_modules/@getmash/client-sdk/dist/widgets/widgets.js
var DeprecatedWidgets = [
  "mash-text-reveal",
  "mash-download-btn",
  "mash-paywall",
  "mash-youtube-player",
  "mash-donate-btn"
];
var Widgets = {
  Accordion: { path: "accordion/accordion.js", element: "mash-accordion" },
  Boost: { path: "boost/boost.js", element: "mash-boost-button" },
  ButtonRevealer: {
    path: "content/button-revealer.js",
    element: "mash-button-revealer"
  },
  ContentRevealer: {
    path: "content/content-revealer.js",
    element: "mash-content-revealer"
  },
  DonateButton: {
    path: "donate/donate-button.js",
    element: "mash-donate-button"
  },
  DownloadButton: {
    path: "download/download-button.js",
    element: "mash-download-button"
  },
  Link: { path: "link/link.js", element: "mash-link" },
  VideoPlayer: { path: "media/video-player.js", element: "mash-video-player" }
};
function injectWidgets(baseURL) {
  const scripts = Object.values(Widgets).map((value) => {
    const script = window.document.createElement("script");
    script.async = true;
    script.src = `${baseURL}/${value.path}`;
    return script;
  });
  window.document.head.append(...scripts);
}
function _isWidgetOnPage() {
  const widgets = Object.values(Widgets);
  for (let i = 0; i < widgets.length; i++) {
    const el = window.document.querySelector(widgets[i].element);
    if (el)
      return true;
  }
  for (let i = 0; i < DeprecatedWidgets.length; i++) {
    const el = window.document.querySelector(DeprecatedWidgets[i]);
    if (el)
      return true;
  }
  return false;
}
function isWidgetOnPage() {
  return new Promise((resolve) => {
    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", () => resolve(_isWidgetOnPage()));
      return;
    }
    resolve(_isWidgetOnPage());
  });
}

// node_modules/@getmash/client-sdk/dist/Mash.js
var Mash = class {
  constructor(config) {
    __publicField(this, "api", null);
    __publicField(this, "iframe");
    __publicField(this, "initialized", false);
    __publicField(this, "config");
    __publicField(this, "positionPromise");
    this.config = parse(config);
    this.iframe = new IFrame(this.config.walletURL);
    if (!this.config.earnerID) {
      this.positionPromise = Promise.resolve(getWalletPosition());
      return;
    }
    if (this.config.widgets.injectTheme || this.config.widgets.injectWidgets) {
      preconnect(this.config.widgets.baseURL);
    }
    if (this.config.widgets.injectWidgets) {
      injectWidgets(this.config.widgets.baseURL);
    }
    this.positionPromise = getEarner(this.config.api, this.config.earnerID).then((result) => {
      if (this.config.widgets.injectTheme) {
        injectTheme(this.config.widgets.baseURL, result.customization.theme);
      }
      return result.customization.walletButtonPosition;
    }).catch(() => {
      console.warn("[MASH] Error when fetching wallet placement from API, using default placement and theme");
      if (this.config.widgets.injectTheme) {
        injectTheme(this.config.widgets.baseURL, {
          primaryColor: "#000",
          fontFamily: "inherit"
        });
      }
      return getWalletPosition();
    });
  }
  static hasValidAutopayAuthorization(cost, authorization) {
    if (!authorization)
      return false;
    const maxSpend = parseFloat(authorization.maxAutopayAuthorized.value);
    const cleanCost = parseFloat(cost);
    const curSpend = parseFloat(authorization.spentAmount.fiat.value);
    return curSpend + cleanCost <= maxSpend;
  }
  _init(settings) {
    if (settings) {
      this.config.earnerID = settings.id;
      const formattedPosition = formatPosition((settings == null ? void 0 : settings.position) || {});
      const position = getWalletPosition(formattedPosition.desktop, formattedPosition.mobile);
      return this.mount(position);
    }
    return this.positionPromise.then((position) => this.mount(position));
  }
  init(settings) {
    if (this.iframe.mounted) {
      console.warn("[MASH] Already mounted, ignoring this call to init Mash");
      return Promise.resolve(null);
    }
    if (!this.config.autoHide) {
      return this._init(settings);
    }
    return isWidgetOnPage().then((widgetsExist) => {
      if (!widgetsExist) {
        console.info("[MASH] No mash elements found on page. Mash Wallet is hidden");
        return Promise.resolve(null);
      }
      return this._init(settings);
    });
  }
  access(resourceID) {
    if (!this.api)
      return Promise.resolve(false);
    return this.api.access(resourceID).then((res) => res.hasAccess).catch(() => false);
  }
  hasAccess(resourceID) {
    return this.access(resourceID);
  }
  donate() {
    return new Promise((resolve, reject) => {
      if (!this.api)
        return reject("cannot connect to Mash widget");
      this.api.donate().then(() => resolve()).catch((err) => reject(err));
    });
  }
  userHasValidBudget(resourceID) {
    if (!this.api)
      return Promise.resolve(false);
    return Promise.all([
      this.api.getAutopayAuthorization(),
      this.api.getResourceCost(resourceID)
    ]).then((result) => {
      const [authorization, cost] = result;
      return Mash.hasValidAutopayAuthorization(cost.fiat.value, authorization);
    });
  }
  isReady() {
    return this.initialized;
  }
  mount(position) {
    return new Promise((resolve, reject) => {
      const onIframeLoaded = (iframe) => {
        this.api = new RPCApi_default(this.iframe.src.origin, iframe.contentWindow);
        this.api.init(this.config.earnerID, position).then(() => {
          this.initialized = true;
          resolve(null);
        }).catch((err) => reject(err));
      };
      this.iframe.mount(onIframeLoaded, position);
    });
  }
};
var Mash_default = Mash;

// node_modules/@getmash/client-sdk/dist/index.js
var dist_default3 = Mash_default;

// dep:@getmash_client-sdk
var getmash_client_sdk_default = dist_default3;
export {
  FloatLocation,
  Events as IFrameEvents,
  IFRAME_NAME as MashIFrameName,
  targets_default as Targets,
  getmash_client_sdk_default as default
};
//# sourceMappingURL=@getmash_client-sdk.js.map
