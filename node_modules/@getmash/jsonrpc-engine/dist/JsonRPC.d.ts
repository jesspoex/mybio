export interface JsonRPCMessage {
    jsonrpc: "2.0";
    id: string;
}
export interface JsonRPCRequest extends JsonRPCMessage {
    method: string;
    params?: unknown[];
}
export interface ErrorPayload<E = unknown> {
    code: number;
    message: string;
    data?: E;
}
export interface JsonRPCResponse<R = unknown, E = unknown> extends JsonRPCMessage {
    result?: R;
    error?: ErrorPayload<E>;
}
export interface JsonRPCSuccessResponse<D = unknown> extends JsonRPCResponse {
    result: D;
}
export interface JsonRPCErrorResponse<E = unknown> extends JsonRPCResponse {
    error: ErrorPayload<E>;
}
export declare function NewRequest(method: string, params?: unknown[]): JsonRPCRequest;
export declare function NewSuccessResponse<R = unknown>(id: string, result: R): JsonRPCSuccessResponse;
export declare function NewErrorResponse<E = unknown>(id: string, error: ErrorPayload<E>): JsonRPCErrorResponse<E>;
export declare class JsonRPCError<E = unknown> extends Error {
    jsonrpc: JsonRPCErrorResponse<E>;
    constructor(reqID: string, code: number, message: string, data?: E);
}
//# sourceMappingURL=JsonRPC.d.ts.map