import PostMessageEngine from "@getmash/post-message";
import { JsonRPCError, NewRequest, } from "./JsonRPC.js";
export default class JsonRPCEngine extends PostMessageEngine {
    // timeout in ms
    timeout;
    constructor(options) {
        const { timeout, ...rest } = options;
        super(rest);
        this.timeout = timeout || null;
    }
    static _tryResolveMessage(data) {
        return [data.result, data.error];
    }
    /**
     * Call function through PostMessage using JsonRPC format
     * @param method fn name to call
     * @param args arguments to pass into function
     * @returns Promise<T>
     */
    call(method, ...args) {
        return new Promise((resolve, reject) => {
            const request = NewRequest(method, args);
            const timer = this.timeout
                ? setTimeout(() => {
                    const timeoutError = new JsonRPCError(request.id, 500, "Request timed out.");
                    reject(timeoutError.jsonrpc.error);
                }, this.timeout)
                : null;
            this._listen(evt => {
                const payload = evt.data;
                if (!payload || payload.id !== request.id)
                    return;
                if (timer) {
                    clearTimeout(timer);
                }
                const [result, err] = JsonRPCEngine._tryResolveMessage(payload);
                this.unsubscribe(request.id);
                if (err) {
                    reject(err);
                    return;
                }
                if (!result) {
                    const unknownError = new JsonRPCError(request.id, 500, "Internal Error");
                    reject(unknownError.jsonrpc.error);
                    return;
                }
                resolve(result);
            }, request.id);
            this.send(request);
        });
    }
}
