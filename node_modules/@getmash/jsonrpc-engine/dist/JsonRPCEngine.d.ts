import PostMessageEngine, { EngineListener, PostMessageEngineOptions } from "@getmash/post-message";
import { JsonRPCMessage, JsonRPCResponse, ErrorPayload } from "./JsonRPC.js";
export interface JsonRPCOptions extends PostMessageEngineOptions {
    timeout?: number;
}
export declare type JsonRPCListener = EngineListener<JsonRPCMessage>;
export default class JsonRPCEngine extends PostMessageEngine<JsonRPCMessage> {
    private timeout;
    constructor(options: JsonRPCOptions);
    static _tryResolveMessage<TResult, TError>(data: JsonRPCResponse<TResult, TError>): [TResult | undefined, ErrorPayload<TError> | undefined];
    /**
     * Call function through PostMessage using JsonRPC format
     * @param method fn name to call
     * @param args arguments to pass into function
     * @returns Promise<T>
     */
    call<TResult, TError = unknown>(method: string, ...args: unknown[]): Promise<TResult>;
}
//# sourceMappingURL=JsonRPCEngine.d.ts.map