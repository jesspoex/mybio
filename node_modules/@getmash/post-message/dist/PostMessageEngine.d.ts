export declare type PostMessageEvent<TData = unknown> = {
    targetName: string;
    data?: TData;
};
export interface PostMessageEngineOptions {
    name: string;
    targetName: string;
    targetWindow?: Window | null;
    targetWindowFilter?: boolean;
    targetOrigin?: string;
    debug?: boolean;
}
declare type EventListener<TData = unknown> = (evt: PostMessageEvent<TData>) => void;
declare type Unsubscribe = () => void;
export declare type EngineListener<T> = (callback: EventListener<T>) => Unsubscribe;
/**
 * Add structure to the postmessage channel by defining message types
 * and listening for specific streams based on engine name and window.
 */
export default class PostMessageEngine<TData> {
    /** The name of the engine. The engine will only listen for events sent to this name. */
    name: string;
    /** The name of the engine to send messages to. */
    private _targetName;
    /** The window to send and receive messages to. Defaults to current window. */
    private _targetWindow;
    /** Listen for messages from just target window or all windows if disabled. Defaults to true.*/
    private _targetWindowFilter;
    /** Origin to send and receive messages on. Security backstop, be careful of using '*'. Defaults to current origin. */
    private _targetOrigin;
    private _listeners;
    private _logger;
    constructor(options: PostMessageEngineOptions);
    /**
     * Check to determine if message should be ignore. PostMessage listener can be polluted with
     * external message. This filter creates a "stream" that only processes events between 2 targets.
     */
    private _shouldIgnoreMessage;
    _listen(listener: EventListener<TData>, id: string): Unsubscribe;
    /**
     * Unsubscribe listener.
     * @param id of listener
     */
    unsubscribe(id: string): void;
    /**
     * Sends a message using targetWindow.
     * @param data to send through post message
     */
    send(data: TData): void;
    /**
     * Attach a listener to events sent to engine.
     * @param callback to process event
     * @returns fn to unsubscribe listener
     */
    listen(callback: EventListener<TData>): Unsubscribe;
    /**
     * Remove all event listeners.
     */
    destroy(): void;
}
export {};
//# sourceMappingURL=PostMessageEngine.d.ts.map