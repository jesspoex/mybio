import { WalletButtonPosition } from "../api/routes.js";
export declare enum Targets {
    HostSiteFrame = "@mash/host-site-iframe",
    Wallet = "@mash/wallet"
}
export declare const MAX_CONTENT_WIDTH = 428;
export declare const MAX_CONTENT_HEIGHT = 628;
export declare const MIN_CONTENT_WIDTH = 100;
export declare const MIN_CONTENT_HEIGHT = 100;
export declare const MAX_HEIGHT_NOTIFICATION = 140;
export declare const MAX_SHIFT_VERTICAL = 200;
export declare const MAX_SHIFT_HORIZONTAL = 300;
export declare const BASIC_SHIFT_VERTICAL = 100;
export declare const BASIC_SHIFT_HORIZONTAL = 100;
export declare const GHOST_SHIFT = 80;
export declare const INTERCOM_SHIFT = 60;
export declare type EventMessage<T = Record<string, unknown>> = {
    name: string;
    metadata: T;
};
declare type OnLoadCallback = (iframe: HTMLIFrameElement) => void;
/**
 * Converts a dict of styles into HTML acceptable style string
 * @param styles Record<string, string|number>
 * @returns string
 */
export declare function toHTMLStyle(styles: Record<string, string | number>): string;
export declare enum Events {
    WalletOpened = "wallet:open",
    WalletClosed = "wallet:close",
    WalletLoaded = "wallet:loaded",
    LayoutChanged = "layout:changed",
    NotificationUpdate = "notifications:update"
}
export declare const IFRAME_NAME = "mash_wallet";
export default class IFrame {
    readonly src: URL;
    mounted: boolean;
    private open;
    private notificationCount;
    private desktopFloatSide;
    private desktopFloatPlacement;
    private desktopShiftConfiguration;
    private mobileFloatSide;
    private container;
    private iframe;
    private engine;
    constructor(src: string);
    /**
     * Set height and width of the div container holding the iframe
     * @param height number
     * @param width number
     * @param unit string
     */
    private setContainerSize;
    /**
     * Resize the iframe container based on open state, notification count and
     * dimensions of the page
     */
    private resize;
    /**
     * Position the IFrame container according to user settings
     * and screen size
     */
    private position;
    /**
     * Retrieve mediaQueryList for the given mediaQuery that changes the layout
     * of the iframe container
     * @returns void
     */
    private getMediaQuery;
    /**
     * MediaQuery listener that triggers whenever a change is detected. Notify the
     * Wallet of changes and resize the iframe container as required
     * @param mq MediaQueryListEvent
     */
    private onMediaQueryChanged;
    /**
     * Setup all listeners required for the iframe
     */
    private setupListeners;
    /**
     * Normalize shift to ensure valid value
     * @param value number
     * @param max number
     * @returns number
     */
    private normalizeShift;
    /**
     * Setup post message tunnel between the host site and the Mash Wallet
     * @param onLoadCallback OnLoadCallback
     */
    private setupPostMessageEngine;
    /**
     * Mount the iframe and load the Mash Wallet. Accepts a callback that triggered
     * when the Wallet has loaded
     * @param onLoad OnLoadCallback
     */
    mount(onLoad: OnLoadCallback, position: WalletButtonPosition): void;
}
export {};
//# sourceMappingURL=IFrame.d.ts.map